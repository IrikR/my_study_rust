// 3. Литералы и операторы
//
// Целые числа 1, с плавающей точкой 1.2, символы 'a', строки "abc", логические true и
// значения пустого типа () могут быть выражены с помощью литералов.
//
// Также целые числа можно выразить через шестнадцатеричное, восьмеричное или двоичное
// обозначение, используя один из префиксов: 0x, 0o или 0b.
//
// В числовые литералы можно вставлять подчёркивания для читабельности, например,
// 1_000 такой же, как и 1000, а 0.000_001 такой же, как и 0.000001.
//
// Мы должны сказать компилятору, какой из литералов мы используем. Сейчас мы будем
// использовать суффикс u, указывающий, что литерал является целым числом без знака,
// суффикс i, чтобы указать, что это знаковое целое число.
// Мы рассмотрим систему типов в 5 главе, а также подробную информацию о аннотировании литералов.
//
// Доступные операторы и их приоритет похож на C-подобных языках.
pub mod operator {
    pub fn operator() {
        // Целочисленное сложение
        println!("1 + 2 = {}", 1 + 2);

        // Вычитание
        println!("1 - 2 = {}", 1 - 2);
        // Попробуйте изменить `1i` на `1u` и понять, почему тип важен

        // Булева логика
        println!("true AND false is {}", true && false);
        println!("true OR false is  {}", true || false);
        println!("NOT true is       {}", !true);

        // Битовые операции
        println!("0011 AND 0101 is {:04b}", 0b0011 & 0b0101);
        println!("0011 OR  0101 is {:04b}", 0b0011 | 0b0101);
        println!("0011 XOR 0101 is {:04b}", 0b0011 ^ 0b0101);
        println!("1 << 5 is {}", 1 << 5);
        println!("0x80 >> 2 is 0x{:x}", 0x80 >> 2);

        // Используйте подчеркивания, чтобы улучшить читаемость
        println!("One million is written as {}", 1_000_000);
    }
}
